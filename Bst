#include<stdio.h>
#include<stdlib.h>
struct bstnode
{
int data;
struct bstnode *left;
struct bstnode *right;
};

struct bstnode *newnode(int data)
{
struct bstnode *temp;
temp=(struct bstnode*)malloc(sizeof(struct bstnode));
temp->data=data;
temp->left=temp->right=NULL;

return temp;
}

struct bstnode *insert(struct bstnode *root,int data)
{

if(root==NULL)
{

root=newnode(data);
}

else if(data>root->data)
{
root->right=insert(root->right,data);
}

else if(data<root->data)
{

root->left=insert(root->left,data);

}

return root;

}

int search(struct bstnode *root,int x)
{
    if(root==NULL)
    return 0;

   else if(root->data==x)
    return 1;
    else if(root->data>x)
    {
       search(root->left,x);
    }
   else if(root->data<x)
   {
       search(root->right,x);
   }

}


void preorder(struct bstnode* root)
{
    
    if(root!=NULL)
    
    {
    printf("%d \t",root->data);
    preorder(root->left);
    preorder(root->right);
    }
}


void postorder(struct bstnode* root)
{
    if(root==NULL)
    return;
    postorder(root->left);
    postorder(root->right);
    printf("%d \t",root->data);
    
}

void inorder(struct bstnode* root)
{
    if(root==NULL)
    return;
    inorder(root->left);
    printf("%d \t",root->data);
    inorder(root->right);
    
}

void max(struct bstnode* root)
{
  
    if(root!=NULL)
    {
    while((root->right!=NULL))
    {
        root=root->right;
    }
    printf(" maximum element is present in bst is = %d \n",root->data);
    }
}
    

void min(struct bstnode* root)
{
    if(root==NULL)
   {
     return;
   }
      else if(root->left==NULL)
       {
           printf("minimum element present in bst is %d",root->data);
           
       }
       
   min(root->left);
    }
 int main()
{
struct bstnode *root =NULL;
while(1)
{

printf("\n 1 want to enter number ");
printf("\n 2 want to search number ");
printf("\n 3 want to display numbers in preorder");
printf("\n 4 want to display numbers in postorder");
printf("\n 5 want to display numbers in inorder");
printf("\n 6 want to find maximum element in bst");
printf("\n 7 want to find minimum element in bst");
printf("\n 8 exit");
printf("\n enter the choice \n");

int ch;
scanf("%d",&ch);
switch(ch)
{
    case 1:
    {
        int num;
        printf("enter the number you want to add in bst \n");
        scanf("%d",&num);
     root=insert(root,num);        
    
    break;
    }
    case 2:
    {
       printf("enter the element you want to find \n");
       int x;
         scanf("%d",&x);

       if(search(root,x)==1)
       printf("found \n");
        else
       printf("not found \n"); 
    
       break;
      }
     case 3:
    {
   
    preorder(root);
    break;
    }

    case 4:
    {
        postorder(root);
        break;
    }
    
    case 5:
    {
        inorder(root);
    
        break;
    }
     
     case 6:
     {
         max(root);
       break;
     }
     
     case 7:
     {
         min(root);
         break;
     }
    case 8:
    {

    exit(0);
        break;
    }
    default:
    printf("you enter the wrong choice \n");
    
}

    
}
return 0;
}



